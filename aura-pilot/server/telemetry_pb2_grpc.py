# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import telemetry_pb2 as telemetry__pb2


class TelemetryServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SubscribeTelemetry = channel.unary_stream(
                '/telemetry.TelemetryService/SubscribeTelemetry',
                request_serializer=telemetry__pb2.TelemetryRequest.SerializeToString,
                response_deserializer=telemetry__pb2.TelemetryData.FromString,
                )


class TelemetryServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SubscribeTelemetry(self, request, context):
        """Stream telemetry data from a switch
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TelemetryServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SubscribeTelemetry': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeTelemetry,
                    request_deserializer=telemetry__pb2.TelemetryRequest.FromString,
                    response_serializer=telemetry__pb2.TelemetryData.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'telemetry.TelemetryService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TelemetryService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SubscribeTelemetry(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/telemetry.TelemetryService/SubscribeTelemetry',
            telemetry__pb2.TelemetryRequest.SerializeToString,
            telemetry__pb2.TelemetryData.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
